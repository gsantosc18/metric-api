version: '3'
services:

  db:
    container_name: mysql
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'metric-app'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'root'
      MYSQL_ROOT_PASSWORD: 'root'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - my-db:/var/lib/mysql
    networks:
      - dev-infra

  app:
    container_name: app
    build: 
      context: ../
      dockerfile: DockerFile
    environment:
      - OTEL_SERVICE_NAME=metrics-app
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_METRIC_EXPORT_INTERVAL=5000
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=metrics-app
      - DB_HOST=mysql
    ports:
      - 8080:8080
    networks:
      - dev-infra
    depends_on:
      - db
      - otel-collector
      - zipkin
      - kafka

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.84.0
    container_name: otel-collector
    restart: always
    command: ["--config=/etc/collector-config.yaml"]
    volumes:
      - ./opentelemetry/collector-config.yaml:/etc/collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "55679:55679" # zpages extension
      - "4317:4317"   # otlp receiver
    networks:
      - dev-infra
    depends_on:
      - zipkin
      - kafka

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.47
    ports:
      - 16686:16686
      - 14250:14250
    networks:
      - dev-infra

  zipkin:
    container_name: zipkin
    image: ghcr.io/openzipkin/zipkin-slim:latest
    environment:
      - STORAGE_TYPE=mem
      - MYSQL_HOST=mysql
    ports:
      - 9411:9411
    networks:
      - dev-infra

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    restart: unless-stopped
    networks:
      - dev-infra
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    depends_on:
      - otel-collector

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    networks:
      - dev-infra
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true

  opensearch-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
    image: opensearchproject/opensearch:latest # Specifying the latest available image - modify if you want a specific version
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node1 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1 # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    networks:
      - dev-infra # All of the containers will join the same Docker bridge network

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: opensearch-dashboards
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
    networks:
      - dev-infra

  opensearch-dataprepper:
    image: opensearchproject/data-prepper:latest
    container_name: opensearch-dataprepper
    ports:
      - 4900:4900
    expose:
      - 4900
    volumes:
      - ./opensearch-dataprepper/pipelines.yaml:/usr/share/data-prepper/pipelines/pipelines.yaml
      - ./opensearch-dataprepper/data-prepper-config.yaml:/usr/share/data-prepper/config/data-prepper-config.yaml
    depends_on:
      - opensearch-node1
      - kafka
    networks:
      - dev-infra

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - dev-infra

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - dev-infra

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8086:8080
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
    networks:
      - dev-infra

networks:
  dev-infra:
    external: true
    name: dev-infra
volumes:
  my-db:
  prometheus_data:
  grafana_data:
  opensearch-data1:
